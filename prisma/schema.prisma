generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model certificate {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(255)
  description  String?  @db.VarChar(255)
  exam_id      String   @db.Uuid
  user_id      String   @db.Uuid
  date_created DateTime @default(now()) @db.Timestamp(6)
  last_updated DateTime @default(now()) @db.Timestamp(6)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  exam         exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model course {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  fee             Int
  organization_id String       @db.Uuid
  date_created    DateTime     @default(now()) @db.Timestamp(6)
  last_updated    DateTime     @default(now()) @db.Timestamp(6)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  exam            exam[]
  module          module[]
}

model exam {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(255)
  description  String?       @db.VarChar(255)
  course_id    String        @db.Uuid
  date_created DateTime      @default(now()) @db.Timestamp(6)
  last_updated DateTime      @default(now()) @db.Timestamp(6)
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  certificate  certificate[]
  course       course        @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model module {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(255)
  description  String?  @db.VarChar(255)
  course_id    String   @db.Uuid
  date_created DateTime @default(now()) @db.Timestamp(6)
  last_updated DateTime @default(now()) @db.Timestamp(6)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  course       course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?   @db.VarChar(255)
  date_created DateTime? @default(now()) @db.Timestamp(6)
  last_updated DateTime? @default(now()) @db.Timestamp(6)
  name         String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Uuid
  tenant_id    String    @db.VarChar(255)
  course       course[]
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  certificate  certificate[]
  organization organization[]
}
